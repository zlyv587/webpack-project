"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

function _typeof(obj) { return obj && typeof Symbol !== "undefined" && obj.constructor === Symbol ? "symbol" : typeof obj; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { var callNext = step.bind(null, "next"); var callThrow = step.bind(null, "throw"); function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(callNext, callThrow); } } callNext(); }); }; }

exports.default = (function () {
  var ref = _asyncToGenerator(regeneratorRuntime.mark(function _callee(input) {
    var _ref;

    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _ref = function _ref(_id) {
              if (!(typeof _id === 'string')) {
                throw new TypeError("Function \"demo\" return value violates contract, expected string got " + (_id === null ? 'null' : (typeof _id === "undefined" ? "undefined" : _typeof(_id)) === 'object' && _id.constructor ? _id.constructor.name || '[Unknown Object]' : typeof _id === "undefined" ? "undefined" : _typeof(_id)));
              }

              return _id;
            };

            if (Array.isArray(input) && input.every(function (item) {
              return typeof item === 'string';
            })) {
              _context.next = 3;
              break;
            }

            throw new TypeError("Value of argument \"input\" violates contract, expected string[] got " + (input === null ? 'null' : (typeof input === "undefined" ? "undefined" : _typeof(input)) === 'object' && input.constructor ? input.constructor.name || '[Unknown Object]' : typeof input === "undefined" ? "undefined" : _typeof(input)));

          case 3:
            return _context.abrupt("return", _ref(input[0]));

          case 4:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, this);
  }));

  return function demo(_x) {
    return ref.apply(this, arguments);
  };
})();