'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = demo;

function _typeof(obj) { return obj && typeof Symbol !== "undefined" && obj.constructor === Symbol ? "symbol" : typeof obj; }

var Type = function Type(input) {
  return typeof input === 'number';
};

function demo() {
  var foo = ['foo', 123, 'bar', 456];

  if (!(Array.isArray(foo) && foo.every(function (item) {
    return typeof item === 'string' || Type(item);
  }))) {
    throw new TypeError('Value of variable "foo" violates contract, expected Array<string | Type> got ' + (foo === null ? 'null' : (typeof foo === 'undefined' ? 'undefined' : _typeof(foo)) === 'object' && foo.constructor ? foo.constructor.name || '[Unknown Object]' : typeof foo === 'undefined' ? 'undefined' : _typeof(foo)));
  }

  if (!(foo && typeof foo[Symbol.iterator] === 'function')) {
    throw new TypeError('Expected foo to be iterable, got ' + (foo === null ? 'null' : (typeof foo === 'undefined' ? 'undefined' : _typeof(foo)) === 'object' && foo.constructor ? foo.constructor.name || '[Unknown Object]' : typeof foo === 'undefined' ? 'undefined' : _typeof(foo)));
  }

  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = foo[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var bar = _step.value;

      if (!(typeof bar === 'string' || Type(bar))) {
        throw new TypeError('Value of variable "bar" violates contract, expected string | Type got ' + (bar === null ? 'null' : (typeof bar === 'undefined' ? 'undefined' : _typeof(bar)) === 'object' && bar.constructor ? bar.constructor.name || '[Unknown Object]' : typeof bar === 'undefined' ? 'undefined' : _typeof(bar)));
      }
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  // ...
  return 123;
}