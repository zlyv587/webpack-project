"use strict";

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = demo;

function _typeof(obj) { return obj && typeof Symbol !== "undefined" && obj.constructor === Symbol ? "symbol" : typeof obj; }

function demo(headers) {
  var isid = true;
  var foo = { a: "123" };

  if (!(foo != null && (typeof foo === "undefined" ? "undefined" : _typeof(foo)) === 'object' && typeof foo.a === 'string')) {
    throw new TypeError("Value of variable \"foo\" violates contract, expected { a: string\n} got " + (foo === null ? 'null' : (typeof foo === "undefined" ? "undefined" : _typeof(foo)) === 'object' && foo.constructor ? foo.constructor.name || '[Unknown Object]' : typeof foo === "undefined" ? "undefined" : _typeof(foo)));
  }

  var container = {
    headers: {},
    something: "else",

    method: function method() {
      function _method(_id) {
        if (!(typeof _id === 'string')) {
          throw new TypeError("Function return value violates contract, expected string got " + (_id === null ? 'null' : (typeof _id === "undefined" ? "undefined" : _typeof(_id)) === 'object' && _id.constructor ? _id.constructor.name || '[Unknown Object]' : typeof _id === "undefined" ? "undefined" : _typeof(_id)));
        }

        return _id;
      }

      return _method(this.something);
    }
  };
  container.headers = _extends({ 'x-user-isid': isid }, foo, headers);
  return container;
}