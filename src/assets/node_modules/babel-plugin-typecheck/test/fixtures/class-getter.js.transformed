"use strict";

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = demo;

function _typeof(obj) { return obj && typeof Symbol !== "undefined" && obj.constructor === Symbol ? "symbol" : typeof obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var User = (function () {
  function User(name) {
    _classCallCheck(this, User);

    this.name = name;
  }

  _createClass(User, [{
    key: "length",
    get: function get() {
      function _ref(_id) {
        if (!(typeof _id === 'number')) {
          throw new TypeError("Function return value violates contract, expected number got " + (_id === null ? 'null' : (typeof _id === "undefined" ? "undefined" : _typeof(_id)) === 'object' && _id.constructor ? _id.constructor.name || '[Unknown Object]' : typeof _id === "undefined" ? "undefined" : _typeof(_id)));
        }

        return _id;
      }

      return _ref(this.name.length);
    }
  }, {
    key: "minusLength",
    get: function get() {
      return -this.length;
    }
  }]);

  return User;
})();

function demo(name) {
  if (!(typeof name === 'string')) {
    throw new TypeError("Value of argument \"name\" violates contract, expected string got " + (name === null ? 'null' : (typeof name === "undefined" ? "undefined" : _typeof(name)) === 'object' && name.constructor ? name.constructor.name || '[Unknown Object]' : typeof name === "undefined" ? "undefined" : _typeof(name)));
  }

  var user = new User(name);
  return user.length;
}