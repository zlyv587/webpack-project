"use strict";

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = demo;

function _typeof(obj) { return obj && typeof Symbol !== "undefined" && obj.constructor === Symbol ? "symbol" : typeof obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Thing = exports.Thing = (function () {
  function Thing(input) {
    _classCallCheck(this, Thing);

    this.input = input;
  }

  _createClass(Thing, [{
    key: "get",
    value: function get() {
      return this.input;
    }
  }, {
    key: "foo",
    value: function foo() {
      function _ref2(_id2) {
        if (!(typeof _id2 === 'string')) {
          throw new TypeError("Function return value violates contract, expected string got " + (_id2 === null ? 'null' : (typeof _id2 === "undefined" ? "undefined" : _typeof(_id2)) === 'object' && _id2.constructor ? _id2.constructor.name || '[Unknown Object]' : typeof _id2 === "undefined" ? "undefined" : _typeof(_id2)));
        }

        return _id2;
      }

      return _ref2("123");
    }
  }]);

  return Thing;
})();

function demo(input) {
  function _ref3(_id3) {
    if (!(Array.isArray(_id3) && _id3.length >= 2 && typeof _id3[1] === 'string')) {
      throw new TypeError("Function \"demo\" return value violates contract, expected [Z, string] got " + (_id3 === null ? 'null' : (typeof _id3 === "undefined" ? "undefined" : _typeof(_id3)) === 'object' && _id3.constructor ? _id3.constructor.name || '[Unknown Object]' : typeof _id3 === "undefined" ? "undefined" : _typeof(_id3)));
    }

    return _id3;
  }

  var instance = new Thing(input);
  return _ref3([instance.get(), instance.foo()]);
}