"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = demo;

var _marked = [gen].map(regeneratorRuntime.mark);

function _typeof(obj) { return obj && typeof Symbol !== "undefined" && obj.constructor === Symbol ? "symbol" : typeof obj; }

function demo(input) {
  function _ref(_id) {
    if (!Array.isArray(_id)) {
      throw new TypeError("Function \"demo\" return value violates contract, expected T[] got " + (_id === null ? 'null' : (typeof _id === "undefined" ? "undefined" : _typeof(_id)) === 'object' && _id.constructor ? _id.constructor.name || '[Unknown Object]' : typeof _id === "undefined" ? "undefined" : _typeof(_id)));
    }

    return _id;
  }

  var items = [];
  _gen = gen(input);

  if (!(_gen && typeof _gen[Symbol.iterator] === 'function')) {
    throw new TypeError("Expected _gen to be iterable, got " + (_gen === null ? 'null' : (typeof _gen === "undefined" ? "undefined" : _typeof(_gen)) === 'object' && _gen.constructor ? _gen.constructor.name || '[Unknown Object]' : typeof _gen === "undefined" ? "undefined" : _typeof(_gen)));
  }

  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = _gen[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var _gen;

      var item = _step.value;

      items.push(item);
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  return _ref(items);
}

function gen(item) {
  var _checkGenYield;

  return regeneratorRuntime.wrap(function gen$(_context) {
    while (1) switch (_context.prev = _context.next) {
      case 0:
        _checkGenYield = function _checkGenYield(_id3) {
          if (!(typeof _id3 === 'number' || typeof _id3 === 'string')) {
            throw new TypeError("Function \"gen\"  yielded an invalid value, expected number | string got " + (_id3 === null ? 'null' : (typeof _id3 === "undefined" ? "undefined" : _typeof(_id3)) === 'object' && _id3.constructor ? _id3.constructor.name || '[Unknown Object]' : typeof _id3 === "undefined" ? "undefined" : _typeof(_id3)));
          }

          return _id3;
        };

        _context.next = 3;
        return 1;

      case 3:
        _context.next = 5;
        return 2;

      case 5:
        _context.next = 7;
        return 3;

      case 7:
        _context.next = 9;
        return _checkGenYield(item);

      case 9:
        return _context.abrupt("return", true);

      case 10:
      case "end":
        return _context.stop();
    }
  }, _marked[0], this);
}