"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = demo;

function _typeof(obj) { return obj && typeof Symbol !== "undefined" && obj.constructor === Symbol ? "symbol" : typeof obj; }

function demo(input) {
  if (!(input && typeof input[Symbol.iterator] === 'function')) {
    throw new TypeError("Value of argument \"input\" violates contract, expected Iterable<number> got " + (input === null ? 'null' : (typeof input === "undefined" ? "undefined" : _typeof(input)) === 'object' && input.constructor ? input.constructor.name || '[Unknown Object]' : typeof input === "undefined" ? "undefined" : _typeof(input)));
  }

  var total = 0;

  if (!(input && typeof input[Symbol.iterator] === 'function')) {
    throw new TypeError("Expected input to be iterable, got " + (input === null ? 'null' : (typeof input === "undefined" ? "undefined" : _typeof(input)) === 'object' && input.constructor ? input.constructor.name || '[Unknown Object]' : typeof input === "undefined" ? "undefined" : _typeof(input)));
  }

  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = input[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var _item = _step.value;

      if (!(typeof _item === 'number')) {
        throw new TypeError("Value of variable \"item\" violates contract, expected number got " + (_item === null ? 'null' : (typeof _item === "undefined" ? "undefined" : _typeof(_item)) === 'object' && _item.constructor ? _item.constructor.name || '[Unknown Object]' : typeof _item === "undefined" ? "undefined" : _typeof(_item)));
      }

      total += _item;
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  return total;
}