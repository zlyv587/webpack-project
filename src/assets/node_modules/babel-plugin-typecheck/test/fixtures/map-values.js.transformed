"use strict";

var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; })();

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = demo;

function _typeof(obj) { return obj && typeof Symbol !== "undefined" && obj.constructor === Symbol ? "symbol" : typeof obj; }

function demo(input) {
  function _ref(_id) {
    if (!(_id instanceof Map && Array.from(_id.values()).every(function (value) {
      return typeof value === 'number';
    }))) {
      throw new TypeError("Function \"demo\" return value violates contract, expected Map<*, number> got " + (_id === null ? 'null' : (typeof _id === "undefined" ? "undefined" : _typeof(_id)) === 'object' && _id.constructor ? _id.constructor.name || '[Unknown Object]' : typeof _id === "undefined" ? "undefined" : _typeof(_id)));
    }

    return _id;
  }

  if (!(input instanceof Map && Array.from(input.keys()).every(function (key) {
    return typeof key === 'string';
  }))) {
    throw new TypeError("Value of argument \"input\" violates contract, expected Map<string, *> got " + (input === null ? 'null' : (typeof input === "undefined" ? "undefined" : _typeof(input)) === 'object' && input.constructor ? input.constructor.name || '[Unknown Object]' : typeof input === "undefined" ? "undefined" : _typeof(input)));
  }

  var converted = new Map();

  if (!(input && typeof input[Symbol.iterator] === 'function')) {
    throw new TypeError("Expected input to be iterable, got " + (input === null ? 'null' : (typeof input === "undefined" ? "undefined" : _typeof(input)) === 'object' && input.constructor ? input.constructor.name || '[Unknown Object]' : typeof input === "undefined" ? "undefined" : _typeof(input)));
  }

  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = input[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var _step$value = _slicedToArray(_step.value, 2);

      var key = _step$value[0];
      var value = _step$value[1];

      converted.set(key, value);
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  return _ref(converted);
}