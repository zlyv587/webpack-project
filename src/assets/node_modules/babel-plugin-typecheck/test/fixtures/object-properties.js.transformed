"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = demo;

function _typeof(obj) { return obj && typeof Symbol !== "undefined" && obj.constructor === Symbol ? "symbol" : typeof obj; }

var User = function User(input) {
  return input != null && (typeof input === "undefined" ? "undefined" : _typeof(input)) === 'object' && (input.name === undefined || typeof input.name === 'string') && (input.email === undefined || typeof input.email === 'string');
};

function demo(name, email) {
  function _ref(_id) {
    if (!User(_id)) {
      throw new TypeError("Function \"demo\" return value violates contract, expected User got " + (_id === null ? 'null' : (typeof _id === "undefined" ? "undefined" : _typeof(_id)) === 'object' && _id.constructor ? _id.constructor.name || '[Unknown Object]' : typeof _id === "undefined" ? "undefined" : _typeof(_id)));
    }

    return _id;
  }

  var user = createUser();
  user.name = name;

  if (!(typeof user.name === 'string')) {
    throw new TypeError("Value of \"user.name\" violates contract, expected string got " + (user.name === null ? 'null' : _typeof(user.name) === 'object' && user.name.constructor ? user.name.constructor.name || '[Unknown Object]' : _typeof(user.name)));
  }

  user.email = email;

  if (!(typeof user.email === 'string')) {
    throw new TypeError("Value of \"user.email\" violates contract, expected string got " + (user.email === null ? 'null' : _typeof(user.email) === 'object' && user.email.constructor ? user.email.constructor.name || '[Unknown Object]' : _typeof(user.email)));
  }

  return _ref(user);
}

function createUser() {
  function _ref2(_id2) {
    if (!User(_id2)) {
      throw new TypeError("Function \"createUser\" return value violates contract, expected User got " + (_id2 === null ? 'null' : (typeof _id2 === "undefined" ? "undefined" : _typeof(_id2)) === 'object' && _id2.constructor ? _id2.constructor.name || '[Unknown Object]' : typeof _id2 === "undefined" ? "undefined" : _typeof(_id2)));
    }

    return _id2;
  }

  return _ref2({});
}